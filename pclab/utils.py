# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_utils.ipynb.

# %% auto 0
__all__ = ['def_device', 'to_device', 'DataLoaders', 'pc_to_o3d', 'quick_vis', 'cal_loss']

# %% ../nbs/00_utils.ipynb 2
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import open3d as o3d
from typing import Mapping

# %% ../nbs/00_utils.ipynb 3
def_device = 'mps' if torch.backends.mps.is_available() else 'cuda' if torch.cuda.is_available() else 'cpu'

# %% ../nbs/00_utils.ipynb 4
def to_device(x, device=def_device):
    if isinstance(x, torch.Tensor): return x.to(device)
    if isinstance(x, Mapping): return {k:v.to(device) for k,v in x.items()}
    return type(x)(to_device(o, device) for o in x)

# %% ../nbs/00_utils.ipynb 5
class DataLoaders:
    def __init__(self, *dls): self.train, self.valid = dls[:2]

# %% ../nbs/00_utils.ipynb 6
def pc_to_o3d(pc): # point cloud as np.array or torch.tensor
    "turn a point cloud, represented as a np.array or torch.tensor to an [Open3D.geometry.PointCloud](http://www.open3d.org/docs/0.16.0/python_api/open3d.geometry.PointCloud.html)"
    pc = o3d.geometry.PointCloud(
            o3d.utility.Vector3dVector(pc)
    )
    return pc

# %% ../nbs/00_utils.ipynb 7
def quick_vis(pc): # point cloud as np.array or torch.tensor
    if len(pc.shape) == 3 and pc.shape[0] == 1: pc.squeeze(0) # removing batch dimension
    if isinstance(pc, torch.Tensor): pc = pc.cpu().detach().numpy()
    
    if pc.shape[-1] != 3: pc = pc.T 
    
    pc = pc_to_o3d(pc)
    o3d.visualization.draw_geometries([pc])

# %% ../nbs/00_utils.ipynb 10
def cal_loss(pred, gold, smoothing=True):
    ''' Calculate cross entropy loss, apply label smoothing if needed. '''

    gold = gold.contiguous().view(-1)

    if smoothing:
        eps = 0.2
        n_class = pred.size(1)

        one_hot = torch.zeros_like(pred).scatter(1, gold.view(-1, 1), 1)
        one_hot = one_hot * (1 - eps) + (1 - one_hot) * eps / (n_class - 1)
        log_prb = F.log_softmax(pred, dim=1)

        loss = -(one_hot * log_prb).sum(dim=1).mean()
    else:
        loss = F.cross_entropy(pred, gold, reduction='mean')

    return loss
